USE world;
SELECT * FROM COUNTRY;
SELECT * FROM COUNTRY ORDER BY NAME;
SELECT NAME, LIFEEXPECTANCY FROM COUNTRY;
SELECT NAME, LIFEEXPECTANCY AS 'LIFE_EXP'FROM COUNTRY ORDER BY LIFE_EXP DESC;

-- FIRST 5 ROWS WITH HIGHEST LIFE EXPECTANCY
SELECT NAME, LIFEEXPECTANCY AS 'LIFE_EXP'FROM COUNTRY  -- AS  is used for aliasing that is giving nickname 
ORDER BY LIFE_EXP DESC
LIMIT 5;

-- SPECIFCALLY FIND THE THIRD COUNTRY WITH HIGHEST LIFE EXPECTANCY
SELECT NAME, LIFEEXPECTANCY AS 'LIFE_EXP'FROM COUNTRY 
ORDER BY LIFE_EXP DESC
LIMIT 2,1;

-- Play with Columns
SELECT * FROM COUNTRY ORDER BY CODE;  -- CODE  is the column given in the table country refers to the name of the country

-- The count method
SELECT COUNT(*) FROM COUNTRY; -- GIVES THE TOTAL NUMBER OF ROWS IN THE GIVEN TABLE

SELECT COUNT(*) FROM COUNTRY
WHERE LIFEEXPECTANCY>75;    -- USING COUNT WITH WHERE CLAUSE
-- COUNT ONLY COUNTS IF AND ONLY IF DATA EXISTS IN THE PARTICULAR CELL  
-- IN CASE OF COUNTING COLUMNS

SELECT COUNT(LIFEEXPECTANCY) FROM COUNTRY;-- WE GOT ONLY ROWS WITHOUT NULL VALUES

-- USING WHERE CONDITION WITH OR / AND OPERATORS
-- FIND THE NUMBER OF COUNTRIES IN ASIA WITH LIFE EXPECTANCY MORE THAN 45
SELECT COUNT(*) FROM COUNTRY
WHERE LIFEEXPECTANCY>55 AND CONTINENT="ASIA";

USE SCRATCH;
/*SALE,CUSTOMER,ITEM ARE THE TABLES IN SCRATCH DATABASE*/
SELECT * FROM SALE;

-- INSERTING A VALUE INTO THE TABLE 
INSERT INTO SALE(ID,ITEM_ID,CUSTOMER_ID,DATE,QUANTITY,PRICE)
VALUE (6,3,2,'2022-02-09',6,35); -- WE CAN ALSO INSERT MULTIPLE TUPLES INTO THE TABLE BY USING KEYWORD VALUES

-- ITS POSSIBLE TO INSERT ONLY KNOWN VALUES THE UNKNOWN VALUES ARE ATOMATICALLY CONSIDERED AS NULL VALUES
INSERT INTO SALE(ID,ITEM_ID,CUSTOMER_ID,QUANTITY,PRICE)
VALUE (10,8,54,6,60);
SELECT * FROM SALE;

-- USING CUSTOMER TABLE FROM SCRATCH DATABASE!!
SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER(ID,NAME,ADDRESS,CITY,STATE,ZIP)
VALUE(4,"WILL SMITH","123 CHURCH STREET","BANGLORE","KA","512621");

INSERT INTO CUSTOMER(ID,NAME,CITY,STATE)
VALUE(5,'WILL ROGER','BANGLORE','AK');

-- UPDATING THE TABLE
SELECT * FROM CUSTOMER WHERE NAME LIKE "WILL%"; -- GETTING THE RECORDS HAVING FIRSTNAME AS WILL
UPDATE CUSTOMER SET ADDRESS = "123 TEMPLESTREET",ZIP='521463' WHERE NAME LIKE "%ROGER";

SELECT * FROM CUSTOMER WHERE NAME LIKE "WILL%";

CREATE TABLE TEST(
A INT,
B INT,
C VARCHAR(5)
);
INSERT INTO TEST(A,B,C)
VALUES
	(1,2,"THIS"),
    (2,5,"tHAT"),
    (3,8,"sUPER"),
    (4,9,"PIP"),
    (1,78,"iNSTA"),
    (5,62,"PYTON");
SELECT * FROM TEST;

DELETE FROM TEST WHERE a=4;
SELECT * FROM TEST; -- ROW WITH A=4 IS DELETED

DELETE FROM TEST WHERE A=1;
SELECT * FROM TEST; -- ROW WITH A=1 IS DELETED

DELETE FROM TEST;-- DELETES ALL THE ROWS
SELECT * FROM TEST; -- TABLE IS EMPTY

DROP TABLE TEST; -- USED TO DROP TABLE FROM DB


-- THE JOINS*************************************************************
USE ALBUM;
SELECT * FROM ALBUM; -- COLUMNS== ID,TITLE,ARTIST,LABEL,RELEASEDDATE
SELECT * FROM TRACK;-- COLUMNS== ID,ALBUM_ID,TITLE,TRACK_NO,DURATION
/*
ID IS FOREGINKEY OF ALBUM_ID WHICH RELATES TRACK TABLE WITH ALBUM TABLE
*/
SELECT a.artist as Artist , a.title as Album, 
t.track_number as"Track Num", t.title as Track, t.duration as Seconds
FROM ALBUM AS A
JOIN TRACK AS T ON a.id = t.album_id
ORDER BY A.ARTIST;


-- A QUICK NOTE

SHOW DATABASES; --  GETS THE LIST OF ALL DATABASES
SHOW TABLES; -- GETS THE LIST OF ALL TABLES IN CURRENT USING DATABASE

-- TO GET THE COLUMNS OF A PARTICULAR TABLE
DESCRIBE ALBUM; -- GIVES USEFUL INFORMATION ABOUT THE TABLE

SHOW TABLE STATUS; -- GIVES ALL THE INTERNAL DETAILS OF TABLES IN THE DATABASE
DROP TABLE IF EXISTS PLOTLY; -- DROPS A TABLE IF EXISTS


SELECT NOW(); -- gives the current date and time
